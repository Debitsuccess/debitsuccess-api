{
  "openapi": "3.0.0",
  "info": {
    "title": "Payments API",
    "description": "Debitsuccess Payments API provides an interface for all Real-time payments.\n\n## Payment Channels\n* **Casual Payments**  - Type of payments that are made directly to the business (Facility Accounts). The customer that is making the payment is not recorded.\n* **Account Payments** - Type of payments that are recorded against the business customers. Debitsuccess maintains a history of all customers that have/had subscription payments. \n* **Business Collected Payments** - Types of payments collected at the business. This endpoint allows debitsuccess to update the balance of the account so that the same payment is not collected automatically. \n* **Payment Method Configuration** - The Debitsuccess PayMethod Configuration API provides an interface to retrieve the Pay method types configured for particular businesses. Pay method types consist of credit card types and bank account.\n\n\n ### Envrionments \n \n **Test Envrionment**\n https://oc-sbox.debitsuccess.com/Payments/v1.0 \n \n **Live Envrionment** \n https://oc.debitsuccess.com/Payments/v1.0 \n## Authentication \n Please visit [Debitsuccess Identity Service](../docs/Introduction/2-Authentication.md) \n\n## Immutable Requests\nThe API supports immutable requests across all endpoints that are used to create payments. This immutability is enforced by using a unique ExternalPaymentIdentifier + Identity Server Client Id. \n For example, if a request to create a payment fails due to a declined transaction or unknown server error. The API will reject subsequent requests with the same ExternalPaymentIdentifier and for the same Identity server client. \n\n The immutability prevents integration partners from accidentally performing the same payment request twice preventing potential double billing issues. \n\n How you create unique ExternalPaymentIdentifier is up to you, but we suggest using business ID + a V4 UUIDs or another appropriately random string together to generate a unique ExternalPaymentIdentifier. \n\n **Important:** It is recommended to save the ExternalPaymentIdentifier to fetch the payment information using the GET operations of the Casual Payment API.  \n\n\n### Response\n\n  This API uses conventional HTTP response codes to indicate the success or failure of an \n  API request. In general, codes in the 2xx range indicate success, codes in the 4xx range indicate \n  an error that failed given the information provided (e.g., a required parameter was omitted, a \n  request validation failed, etc.), and some codes in the 5xx range indicate an error with API's\n  servers.\n  \n  Following is a list of supported http codes in this API.\n  - 200 Ok - Get\n  \n    Returned by Get endpoint to indicate that the request was successful. \n  \n  - 201 Created - Post\n  \n    Returned by http post method to indicate that a payment resource has been created. The response \n    will contain the payment status code. \n  \n  - 202 Accepted - Post\n  \n    This message indicates that a payment has been accepted for processing. But the processing has not\n    been completed. The request might or might not eventually be acted upon, as it might be disallowed\n    when processing actually takes place. In this scenario, the client must poll the URL returned in \n    the \"location\" header of the response to retrieve the payment status code. The client must retry \n    retrieving the status code for 5 times. If the status code still is \n    processing after retrying. Client should contact Debitsuccess support. Client should not ignore this error and resubmit another payment. Doing so could potentially double bill the customer.\n  \n  - 400 Bad Request - Post\n    \n    Throughout the API the http code 400 is used when the request was \n    unacceptable, often due to missing a required field or validation errors based on the data\n    provided in the request body. The validation errors can be dispelled to the end user. \n  \n  - 422 Unprocessable Entity - Post\n    \n    Returned when the client application or the facility account is not configured for real time \n    casual payments. All facility accounts must be configured with the payment gateways before \n    they can process any type of payments. In the event this error occurs the integration partner must\n    contact Debitsuccess to review/configure the facility accounts.\n    \n  - 401 Unauthorized - Get/Post\n    \n    Occurs when an Unauthorized request is made to a secure endpoint. A valid access token is expected\n    by all the secured endpoints via a ```Authorization``` header. See [Debitsuccess Identity Service](../docs/Introduction/2-Authentication.md) for more \n    information in obtaining valid JWT tokens. The client must retry the request by obtaining a valid access token from the identity service.\n\n  - 403 Forbidden - Get/Post\n  \n    This indicates that the authenticated request does not have sufficient claims for an endpoint. \n   \n  - 409 Conflict - Post\n    \n    The request could not be completed due to a conflict with the external payment identifier.\n    \n  - 429 Too Many Requests - Get\n    \n    Occurs with rate limit is hit by the client.\n  \n  - 500  Internal Server Error\n  \n    Typically occurs when something goes wrong on API back end (These are rare).\n  \n  - 503 Service Unavailable\n  \n    Occurs when the API is currently unavailable typically due to a scheduled outage. \n\n### Response Headers\n  \n   The following additional headers are added to specific response message.\n   \n  - location - returned in 201 and 202. The value of this header contains the URL that can be used to retrieve the payment status.\n  \n  - x-correlation-id - included in all response messages. This is used internal in Debitsuccess to track the path of the real-time payment request. The API consumer is expected to provide correlation id for all support requests.   \n  \n### Response Simulation\n  \n  **NZ/AU**: The following cards can be used to generate different types of status for testing purpose.\n  \n  - Status - authorized\n    \n    **Card Type**: Visa | **Card Number**: 4111111111111111 | **Expiry Date**: 04/35\n  \n  - Status - declined \n    \n    **Card Type**: Visa | **Card Number**: 4999999999999236 | **Expiry Date**: 04/35\n  \n  - Status - declined_insufficient_funds \n  \n    **Card Type**: MasterCard | **Card Number**: 5431111111111228 | **Expiry Date**: 04/35\n    \n  - Status - declined_card_expired \n  \n    **Card Type**: Visa | **Card Number**: 4999999999999996 | **Expiry Date**: 04/10\n  \n  - Status - not_submitted \n  \n    **Card Type**: Visa | **Card Number**: 4999999999999202 | **Expiry Date**: 04/35\n\n",
    "contact": {
      "email": "TestAPI.Support@debitsuccess.com"
    },
    "version": "v1.0"
  },
  "servers": [
    {
      "url": "https://oc-sbox.debitsuccess.com/payments/v1.0"
    }
  ],
  "externalDocs": {
    "description": "Developer Documentation",
    "url": "https://debitsuccess.atlassian.net/wiki/spaces/DDE/overview"
  },
  "tags": [
    {
      "name": "Account Payments",
      "description": "The Account Payment API provides an interface for businesses to accept payment for an account."
    },
    {
      "name": "BusinessCollectedPayment",
      "description": "The Business Collected Payment API collected allows facilities to collect payments at clubs and sync the attempts down to Debitsuccess. This allows Debitsuccess to update the balance of the account so that the same payment is not collected automatically. Currently, there are two functions that are supported by the new REST API for payment collected feature. These are:Record Payment Collected Transaction - allows facilities to send payments that are collected at clubs. Reverse / Refund Payment Collected Transaction - allows facilities to reverse an old payment collected transaction. It is useful if a payment collected required were sent in an error."
    },
    {
      "name": "Casual Payments"
    },
    {
      "name": "Pay Method Configuration"
    },
    {
      "name": "Surcharge"
    },
    {
      "name": "Internal API"
    }
  ],
  "paths": {
    "/account/creditcard": {
      "post": {
        "tags": [
          "Account Payments"
        ],
        "summary": "Create Account Payment",
        "description": "Make a payment for an existing account",
        "operationId": "5e324afe57963486220555b5",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "JWT token using Bearer authorization scheme. See Debitsuccess Identity Service on how to generate the authorization token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request to make payment for existing account",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePaymentRequest"
              },
              "example": {
                "accountId": "DEMO1234567",
                "externalPaymentIdentifier": "W3E4R5TY-5T54-76YT-78UY-DEFR435TGH67",
                "accountHolderName": "Test",
                "cardNumber": "4111111111111111111",
                "cvc": "123",
                "cardType": "visa",
                "expiryDate": "11/2021",
                "token": "",
                "amount": 55.5,
                "paymentDescription": "Payment of $55.50 for testing",
                "createOneOffCharge": true
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Payment created (when the payment is authorized or denied)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/201CreatePayment"
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": "authorised",
                      "externalPaymentIdentifier": "b97d9688-1a07-4b35-ae54-28e32870f7cd",
                      "transactionNumber": "<CcReceipt.txnRef>"
                    }
                  }
                }
              }
            }
          },
          "202": {
            "description": "Accepted -  Occurs when payment has been accepted for processing. But the processing has not been completed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/202CreatePayment"
                },
                "example": {
                  "status": "processing",
                  "externalPaymentIdentifier": "b97d9688-1a07-4b35-ae54-28e32870f7cd"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Request failed due to validation errors, the response lists the field in the request that did not pass the validation. The client can directly show these errors to the end users.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/400CreatePayment"
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "errorCode": "validation",
                      "message": "Invalid request",
                      "errors": [
                        {
                          "field": "AccountId",
                          "message": "AccountId is required."
                        }
                      ]
                    }
                  },
                  "example-2": {
                    "value": {
                      "errorCode": "validation",
                      "message": "Invalid request",
                      "errors": [
                        {
                          "field": "ExternalPaymentIdentifier",
                          "message": "ExternalPaymentIdentifier is required."
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Occurs when the authorization token provided is either expired or invalid.\n"
          },
          "403": {
            "description": "Forbidden - Occurs when the client does not have sufficient claims to access this endpoint. Or when the identity server client does not have access to the business this request is being made for. see - List of claims required for this request see - Additional errorCodes returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/403BusinessAccessDenied"
                },
                "examples": {
                  "example": {
                    "value": {
                      "errorCode": "business_permission",
                      "message": "Unable to process this request due to insufficient business permission."
                    }
                  },
                  "example-1": {
                    "value": {
                      "errorCode": "required_scopes",
                      "message": "Unable to process this request due to insufficient client scopes.",
                      "requiredScopes": [
                        "AccountCreditCard"
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Occurs when the resource provided is not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/404NotFound"
                },
                "example": {
                  "message": "The requested resource could not be found."
                }
              }
            }
          },
          "409": {
            "description": "The request could not be completed due to a conflict with the external payment identifier.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/409CreatePayment"
                },
                "example": {
                  "errorCode": "external_payment_identifier",
                  "message": "The external payment identifier provided has already been used."
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Occurs when the client application or the facility account is not configured appropriately for payment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/422CreatePayment"
                },
                "example": {
                  "errorCode": "legal_address",
                  "message": "No Legal Address found on file. Please contact Debitsuccess."
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Occurs when user has sent too many requests in a given amount of time.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/429TooManyRequests"
                },
                "example": {
                  "message": "You have exceeded the maximum limit of request allowed. Please try your request again in a moment."
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on our end (These are rare).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500InternalServerError"
                },
                "example": {
                  "message": "Something went wrong while processing your request. We’re sorry for the trouble. We’ve been notified of the error and will correct it as soon as possible. Please try your request again in a moment."
                }
              }
            }
          }
        }
      }
    },
    "/account/creditcard/{externalPaymentIdentifier}": {
      "get": {
        "tags": [
          "Account Payments"
        ],
        "summary": "Get Account Payment Status",
        "description": "Retrieves the status of a real time account payment based on external payment identifier provided in the query path. \n",
        "operationId": "5e9794d822413af58fe09f49",
        "parameters": [
          {
            "name": "externalPaymentIdentifier",
            "in": "path",
            "description": "\nThe external identifier which was used to make the payment.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "JWT token using Bearer authorization scheme. See Debitsuccess Identity Service on how to generate the authorization token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with payment status associated to the external payment identifier provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/200GetPayment"
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": "authorized",
                      "externalPaymentIdentifier": "ABC-b5645c56-943f-4562-ab2c-9aedf3c0b1dc",
                      "transactionNumber": "<CcReceipt.txnRef>"
                    }
                  },
                  "example-2": {
                    "value": {
                      "status": "declined",
                      "externalPaymentIdentifier": "b97d9688-1a07-4b35-ae54-28e32870f7cd",
                      "transactionNumber": "<CcReceipt.txnRef>"
                    }
                  },
                  "example-3": {
                    "value": {
                      "status": "declined_insufficient_funds",
                      "externalPaymentIdentifier": "b97d9688-1a07-4b35-ae54-28e32870f7cd",
                      "transactionNumber": "<CcReceipt.txnRef>"
                    }
                  },
                  "example-4": {
                    "value": {
                      "status": "declined_card_expired",
                      "externalPaymentIdentifier": "b97d9688-1a07-4b35-ae54-28e32870f7cd",
                      "transactionNumber": "<CcReceipt.txnRef>"
                    }
                  },
                  "example-5": {
                    "value": {
                      "status": "not_submitted",
                      "externalPaymentIdentifier": "b97d9688-1a07-4b35-ae54-28e32870f7cd",
                      "transactionNumber": "<CcReceipt.txnRef>"
                    }
                  },
                  "example-6": {
                    "value": {
                      "status": "declined_do_not_honour",
                      "externalPaymentIdentifier": "b97d9688-1a07-4b35-ae54-28e32870f7cd",
                      "transactionNumber": "<CcReceipt.txnRef>"
                    }
                  },
                  "example-7": {
                    "value": {
                      "status": "declined_refer_to_card_issuer",
                      "externalPaymentIdentifier": "b97d9688-1a07-4b35-ae54-28e32870f7cd",
                      "transactionNumber": "<CcReceipt.txnRef>"
                    }
                  },
                  "example-8": {
                    "value": {
                      "status": "processing",
                      "externalPaymentIdentifier": "b97d9688-1a07-4b35-ae54-28e32870f7cd",
                      "transactionNumber": "<CcReceipt.txnRef>"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Occurs when the authorization token provided is either expired or invalid.\n"
          },
          "403": {
            "description": "Forbidden - Occurs the client does not have access to the endpoint.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/403ForbiddenClaims"
                },
                "example": {
                  "errorCode": "required_scopes",
                  "message": "Unable to process this request due to insufficient client scopes.",
                  "requiredScopes": [
                    "AccountCreditCard"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Occurs when the resource provided is not found. ",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/404NotFound"
                },
                "example": {
                  "message": "The requested resource could not be found."
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Occurs when the client application or the facility account is not configured appropriately for payment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/422GetPayment"
                },
                "examples": {
                  "example": {
                    "value": {
                      "message": "Cannot find valid merchant details configured. Please contact Debitsuccess."
                    }
                  },
                  "example-1": {
                    "value": {
                      "message": "Cannot find business that matches the BusinessId/BusinessAccountId provided."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on our end (These are rare).",
            "headers": {
              "X-Notification": {
                "description": "This header will be included in all responses when there is important information about the API that will be valuable for all consumers. For example - Information such as system outage will be passed through this header.\n\n",
                "required": true,
                "schema": {
                  "enum": [
                    "Scheduled Api outage - 2017-01-01 22:00:00 to 2017-01-01 22:10:00"
                  ],
                  "type": "string"
                }
              },
              "X-RateLimit-Limit\t": {
                "description": "The maximum number of requests you're permitted to make per hour.\n\n",
                "required": true,
                "schema": {
                  "enum": [
                    60
                  ],
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining\t": {
                "description": "The number of requests remaining in the current rate limit window.\n\n",
                "required": true,
                "schema": {
                  "enum": [
                    10
                  ],
                  "type": "integer"
                }
              },
              "X-RateLimit-Reset\t": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "required": true,
                "schema": {
                  "enum": [
                    1377013266
                  ],
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500InternalServerError"
                },
                "example": {
                  "message": "Something went wrong while processing your request. We’re sorry for the trouble. We’ve been notified of the error and will correct it as soon as possible. Please try your request again in a moment."
                }
              }
            }
          }
        }
      }
    },
    "/businessCollectedPayments": {
      "post": {
        "tags": [
          "BusinessCollectedPayment"
        ],
        "summary": "Create Business Collected Payment",
        "description": "Create a payment collected at business for an existing account",
        "operationId": "5e52fe519742ca2f4df3d431",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "JWT token using Bearer authorization scheme. See Debitsuccess Identity Service on how to generate the authorization token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request to make payment for existing account",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBusinessCollectedPaymentRequest"
              },
              "example": {
                "accountId": "DEMO1234567",
                "externalPaymentIdentifier": "W3E4R5TY-5T54-76YT-78UY-DEFR435TGH67",
                "amount": 55.5,
                "dateTimeOfPayment": "2020-03-01T00:00:00.0000000+00:00",
                "description": "PC of $55.50"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Business collected payment created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/201CreateBusinessCollectedPayment"
                },
                "example": {
                  "accountId": "DEMO1234567",
                  "externalPaymentIdentifier": "W3E4R5TY-5T54-76YT-78UY-DEFR435TGH67"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Request failed due to validation errors, the response lists the field in the request that did not pass the validation. The client can directly show these errors to the end users.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/400CreateBusinessCollectedPayment"
                },
                "example": {
                  "errorCode": "validation",
                  "message": "Invalid request",
                  "errors": [
                    {
                      "field": "accountId",
                      "message": "AccountId is required."
                    },
                    {
                      "field": "accountId",
                      "message": "AccountId is invalid."
                    },
                    {
                      "field": "accountId",
                      "message": "Payments cannot be collected for closed accounts."
                    },
                    {
                      "field": "accountId",
                      "message": "Payments cannot be collected for accounts without any schedules."
                    },
                    {
                      "field": "accountId",
                      "message": "Payments cannot be collected for gateway accounts."
                    },
                    {
                      "field": "accountId",
                      "message": "Cannot find an account that matches the accountId provided."
                    },
                    {
                      "field": "externalPaymentIdentifier",
                      "message": "ExternalPaymentIdentifier is required."
                    },
                    {
                      "field": "externalPaymentIdentifier",
                      "message": " ExternalTransactionIdentifier must be unique within a business account."
                    },
                    {
                      "field": "externalPaymentIdentifier",
                      "message": "ExternalPaymentIdentifier must not exceed 50 characters."
                    },
                    {
                      "field": "dateTimeOfPayment ",
                      "message": "DateTimeOfPayment  is required."
                    },
                    {
                      "field": "dateTimeOfPayment ",
                      "message": "DateTimeOfPayment is invalid.Please use UTC format YYYY-MM-DDT00:00:00.000Z"
                    },
                    {
                      "field": "dateTimeOfPayment ",
                      "message": "DateTimeOfPayment must not be in the future."
                    },
                    {
                      "field": "amount",
                      "message": "Amount is required."
                    },
                    {
                      "field": "amount",
                      "message": "Amount is invalid."
                    },
                    {
                      "field": "amount",
                      "message": "Amount provided must not exceed the outstanding amount of ($)."
                    },
                    {
                      "field": "amount",
                      "message": "Amount must be more than $0."
                    },
                    {
                      "field": "description",
                      "message": "Description must not exceed 30 characters."
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Occurs when the authorization token provided is either expired or invalid.\n"
          },
          "403": {
            "description": "Forbidden - Occurs when the client does not have sufficient claims to access this endpoint. Or when the identity server client does not have access to the business this request is being made for. see - List of claims required for this request see - Additional errorCodes returned",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/403BusinessAccessDenied"
                },
                "example": {
                  "errorCode": "business_permission",
                  "message": "Unable to process this request due to insufficient business permission."
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Occurs when user has sent too many requests in a given amount of time.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/429TooManyRequests"
                },
                "example": {
                  "message": "You have exceeded the maximum limit of request allowed. Please try your request again in a moment."
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on our end (These are rare).",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500InternalServerError"
                },
                "example": {
                  "message": "Something went wrong while processing your request. We’re sorry for the trouble. We’ve been notified of the error and will correct it as soon as possible. Please try your request again in a moment."
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable - API is currently unavailable typically due to a scheduled outage – try again soon.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/503ServiceUnavailable"
                },
                "example": {
                  "message": "The API is currently unavailable due to a scheduled outage – please try again soon."
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Internal API"
        ],
        "summary": "INTERNAL Get Business Collected Payments",
        "description": "Retrieves business collected paymetns based on the query parameters provided.",
        "operationId": "5e530fdb2d8bf4cfa9148db9",
        "parameters": [
          {
            "name": "fromDatetime",
            "in": "query",
            "description": "From datetime - range used to filter payment records to be extracted.",
            "schema": {
              "enum": [
                "2018-11-02T08:11:55Z"
              ],
              "type": "string",
              "default": "2018-11-02T08:11:55Z"
            }
          },
          {
            "name": "toDatetime",
            "in": "query",
            "description": "To datetime - range used to filter payment records to be extracted.",
            "schema": {
              "enum": [
                "2019-11-02T08:11:55Z"
              ],
              "type": "string",
              "default": "2019-11-02T08:11:55Z"
            }
          },
          {
            "name": "businessAccountId",
            "in": "query",
            "description": "Contract Prefix of Business Account associated to the accounts and overdue status changes to be extracted.\n\n",
            "schema": {
              "enum": [
                "DSFit1"
              ],
              "type": "string"
            }
          },
          {
            "name": "accountId",
            "in": "query",
            "description": "Unique identifier associated to the specific account the overdue status changes to be extracted.",
            "schema": {
              "enum": [
                "AILL056H6"
              ],
              "type": "string"
            }
          },
          {
            "name": "nextCursor",
            "in": "query",
            "description": "Indicate the position of the next record to be fetched into the list. Default to retrieve from the first record if not provided.",
            "schema": {
              "enum": [
                "TmV4dEl0ZW1JZDox"
              ],
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Indicate the number of records to be fetched into the list. Default to maximum value of 50 if not provided or value provided is greater than 50.",
            "schema": {
              "enum": [
                10
              ],
              "type": "integer"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "This flag is used to indicate if the retrieval should be done in ascending or descending order,  The default value is ascending.",
            "schema": {
              "enum": [
                "Ascending",
                "Descending"
              ],
              "type": "string",
              "default": "Ascending"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "JWT token using Bearer authorization scheme. See Debitsuccess Identity Service on how to generate the authorization token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with all business collected payments based on the query parameters provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/200GetBusinessCollectedPayment"
                },
                "example": {
                  "businessCollectedPayments": [
                    {
                      "businessAccountId": "DSFit1",
                      "accountId": "AILL056H6",
                      "accountExternalId": "ABC12345",
                      "externalTransactionIdentifier": "9999",
                      "amount": "10.00",
                      "dateTimeOfPayment": "2019-01-01T08:11:55.0000000+00:00",
                      "description": "Payment Desc ABC"
                    },
                    {
                      "businessAccountId": "DSFit1",
                      "accountId": "AILL056H8",
                      "accountExternalId": "ABC12345",
                      "externalTransactionIdentifier": "99999",
                      "amount": "30.00",
                      "dateTimeOfPayment": "2019-01-01T08:11:55.0000000+00:00",
                      "description": "Payment Desc ABC"
                    }
                  ],
                  "responseMetadata": {
                    "nextCursor": "TmV4dEl0ZW1JZDoz",
                    "hasNext": true
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Occurs when the authorization token provided is either expired or invalid.\n"
          },
          "403": {
            "description": "Forbidden - Occurs when the client does not have sufficient claims to access this endpoint. Or when the identity server client does not have access to the business this request is being made for. see - List of claims required for this request see - Additional errorCodes returned",
            "headers": {
              "X-Notification": {
                "description": "This header will be included in all responses when there is important information about the API that will be valuable for all consumers. For example - Information such as system outage will be passed through this header.",
                "required": true,
                "schema": {
                  "enum": [
                    "Scheduled Api outage - 2017-01-01 22:00:00 to 2017-01-01 22:10:00"
                  ],
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests you're permitted to make per hour.",
                "required": true,
                "schema": {
                  "enum": [
                    60
                  ],
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "required": true,
                "schema": {
                  "enum": [
                    10
                  ],
                  "type": "integer"
                }
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "required": true,
                "schema": {
                  "enum": [
                    1377013266
                  ],
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/403BusinessAccessDenied"
                },
                "example": {
                  "errorCode": "access_denied",
                  "message": "Unable to process this request as you do not have access to the business associated to this request."
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Occurs when user has sent too many requests in a given amount of time.",
            "headers": {
              "X-Notification": {
                "description": "This header will be included in all responses when there is important information about the API that will be valuable for all consumers. For example - Information such as system outage will be passed through this header.",
                "required": true,
                "schema": {
                  "enum": [
                    "Scheduled Api outage - 2017-01-01 22:00:00 to 2017-01-01 22:10:00"
                  ],
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests you're permitted to make per hour.",
                "required": true,
                "schema": {
                  "enum": [
                    60
                  ],
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "required": true,
                "schema": {
                  "enum": [
                    10
                  ],
                  "type": "integer"
                }
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "required": true,
                "schema": {
                  "enum": [
                    1377013266
                  ],
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/429TooManyRequests"
                },
                "example": {
                  "message": "You have exceeded the maximum limit of request allowed. Please try your request again in a moment."
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on our end (These are rare).",
            "headers": {
              "X-Notification": {
                "description": "This header will be included in all responses when there is important information about the API that will be valuable for all consumers. For example - Information such as system outage will be passed through this header.",
                "required": true,
                "schema": {
                  "enum": [
                    "Scheduled Api outage - 2017-01-01 22:00:00 to 2017-01-01 22:10:00"
                  ],
                  "type": "string"
                }
              },
              "X-RateLimit-Limit": {
                "description": "The maximum number of requests you're permitted to make per hour.",
                "required": true,
                "schema": {
                  "enum": [
                    60
                  ],
                  "type": "integer"
                }
              },
              "X-RateLimit-Remaining": {
                "description": "The number of requests remaining in the current rate limit window.",
                "required": true,
                "schema": {
                  "enum": [
                    10
                  ],
                  "type": "integer"
                }
              },
              "X-RateLimit-Reset": {
                "description": "The time at which the current rate limit window resets in UTC epoch seconds.",
                "required": true,
                "schema": {
                  "enum": [
                    1377013266
                  ],
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500InternalServerError"
                },
                "example": {
                  "message": "Something went wrong while processing your request. We’re sorry for the trouble. We’ve been notified of the error and will correct it as soon as possible. Please try your request again in a moment."
                }
              }
            }
          }
        },
        "x-internal": true
      }
    },
    "/businessCollectedPayments/{originalExternalPaymentIdentifier}/reverse": {
      "post": {
        "tags": [
          "BusinessCollectedPayment"
        ],
        "summary": "Reverse Business Collected Payment",
        "description": "Reverse a payment collected at business for an existing account",
        "operationId": "5e557e295be7a07eafb7652f",
        "parameters": [
          {
            "name": "originalExternalPaymentIdentifier",
            "in": "path",
            "description": "External Payment Identifier of the original pyment to be reversed",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "JWT token using Bearer authorization scheme. See Debitsuccess Identity Service on how to generate the authorization token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request to delete a business collected payment for existing account",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReverseBusinessCollectedPaymentRequest"
              },
              "example": {
                "externalPaymentIdentifier": "RTY67UJK-VDFR-GT56-VD56-GFGGBDRTGR44",
                "dateTimeOfReversal": "2020-03-01T00:00:00.0000000+00:00",
                "description": "payment reversal"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Business collected payment reversed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/201ReverseBusinessCollectedPayment"
                },
                "example": {
                  "externalPaymentIdentifier": "RTY67UJK-VDFR-GT56-VD56-GFGGBDRTGR44",
                  "dateTimeOfReversal": "2020-03-01T00:00:00.0000000+00:00",
                  "description": "reversal payment collected at business"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Request failed due to validation errors, the response lists the field in the request that did not pass the validation. The client can directly show these errors to the end users.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/400DeleteBusinessCollectedPayment"
                },
                "example": {
                  "errorCode": "validation",
                  "message": "Invalid request",
                  "errors": [
                    {
                      "field": "externalPaymentIdentifier",
                      "message": "ExternalPaymentIdentifier is required."
                    },
                    {
                      "field": "externalPaymentIdentifier",
                      "message": " ExternalPaymentIdentifier must be unique within a business account."
                    },
                    {
                      "field": "externalPaymentIdentifier",
                      "message": "ExternalPaymentIdentifier must not exceed 50 characters."
                    },
                    {
                      "field": "dateTimeOfReversal ",
                      "message": "DateTimeOfReversal is required."
                    },
                    {
                      "field": "dateTimeOfReversal",
                      "message": "DateTimeOfReversal is invalid. Please use UTC format YYYY-MM-DDT00:00:00.000Z."
                    },
                    {
                      "field": "dateTimeOfReversal",
                      "message": "DateTimeOfReversal must not be in the future."
                    },
                    {
                      "field": "dateTimeOfReversal",
                      "message": "DateTimeOfReversal must not be prior to the original payment transaction."
                    },
                    {
                      "field": "description",
                      "message": "Description must not exceed 30 characters."
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Occurs when the authorization token provided is either expired or invalid.\n"
          },
          "403": {
            "description": "Forbidden - Occurs when the client does not have sufficient claims to access this endpoint. Or when the identity server client does not have access to the business this request is being made for. see - List of claims required for this request see - Additional errorCodes returned",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/403BusinessAccessDenied"
                },
                "example": {
                  "errorCode": "business_permission",
                  "message": "Unable to process this request due to insufficient business permission.",
                  "requiredScopes": []
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Occurs when the resource provided is not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/404NotFound"
                },
                "example": {
                  "message": "The requested resource could not be found."
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests - Occurs when user has sent too many requests in a given amount of time.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/429TooManyRequests"
                },
                "example": {
                  "message": "You have exceeded the maximum limit of request allowed. Please try your request again in a moment."
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on our end (These are rare).",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500InternalServerError"
                },
                "example": {
                  "message": "Something went wrong while processing your request. We’re sorry for the trouble. We’ve been notified of the error and will correct it as soon as possible. Please try your request again in a moment."
                }
              }
            }
          }
        }
      }
    },
    "/paymethods": {
      "get": {
        "tags": [
          "Pay Method Configuration"
        ],
        "description": "This endpoint retrieves all active paymethod types for the particular business identified by either businessId (Contract Prefix) or Debitsuccess internal facility Id parameter. Note, you must provide at least one parameter (bussinessId or facilityId) in the request.\n",
        "operationId": "getpaymethodconfigurations",
        "parameters": [
          {
            "name": "bussinessId",
            "in": "query",
            "description": "Debitsuccess bussiness identifier (Contract Prefix).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "facilityId",
            "in": "query",
            "description": "Debitsuccess internal facility identifier.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "JWT token using Bearer authorization scheme. See [Debitsuccess Identity Service ](https://app.swaggerhub.com/apis/debitsuccess/DebitsuccessIdentity/1.0.0) on how to generate the authorization token.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. see - [List of responses](https://debitsuccess.atlassian.net/wiki/spaces/SDT/pages/803176544/Payment+Method+Configuration+API#PaymentMethodConfigurationAPI-WebAPI)",
            "headers": {
              "x-correlation-id": {
                "$ref": "#/components/headers/x-correlation-id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PayMethodResponseList"
                  }
                },
                "examples": {
                  "example-1": {
                    "value": [
                      {
                        "methodType": "CC",
                        "methodSubType": "VI",
                        "networkName": "Visa",
                        "creditAllowed": true,
                        "debitAllowed": true,
                        "prepaidAllowed": false,
                        "validationRules": [
                          {
                            "regex": "^(4)",
                            "purpose": "CardType"
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Occurs when the authorization token provided is either expired or invalid.",
            "headers": {
              "x-correlation-id": {
                "$ref": "#/components/headers/x-correlation-id"
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on our end (These are rare).",
            "headers": {
              "x-correlation-id": {
                "$ref": "#/components/headers/x-correlation-id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "summary": "Get Pay Method Configurations"
      }
    },
    "/paymethods/{paymethodtype}": {
      "get": {
        "tags": [
          "Pay Method Configuration"
        ],
        "description": "This endpoint retrieves the paymethod configuration information for the business based on the paymethod type provided in the request path. \n",
        "operationId": "getpaymethodconfig",
        "parameters": [
          {
            "name": "paymethodtype",
            "in": "path",
            "description": "Paymethod type that is supported by Debitsuccess.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "VI,DI,BA etc"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "JWT token using Bearer authorization scheme. See [Debitsuccess Identity Service ](https://app.swaggerhub.com/apis/debitsuccess/DebitsuccessIdentity/1.0.0) on how to generate the authorization token.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. see - [List of responses](https://debitsuccess.atlassian.net/wiki/spaces/SDT/pages/803176544/Payment+Method+Configuration+API#PaymentMethodConfigurationAPI-WebAPI)",
            "headers": {
              "x-correlation-id": {
                "$ref": "#/components/headers/x-correlation-id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayMethodResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Occurs when the authorization token provided is either expired or invalid.",
            "headers": {
              "x-correlation-id": {
                "$ref": "#/components/headers/x-correlation-id"
              }
            }
          },
          "404": {
            "description": "Not Found - The requested resource could not be found",
            "headers": {
              "x-correlation-id": {
                "$ref": "#/components/headers/x-correlation-id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Not-Found"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on our end (These are rare).",
            "headers": {
              "x-correlation-id": {
                "$ref": "#/components/headers/x-correlation-id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "summary": "List Pay Method Configurations"
      }
    },
    "/paymentprocessorcardtypes": {
      "get": {
        "tags": [
          "Internal API"
        ],
        "description": "This endpoint retrieves the mapping between Debitsuccess card type and a payment processor (Vantiv, Dps) the payment processor specific card type are used when submitting a payment request. Example - DS card type = AM - Vantiv card type = AX\n",
        "operationId": "getpaymentprocessorcardtypes",
        "parameters": [
          {
            "name": "processorname",
            "in": "query",
            "description": "The name of the payment processors used by Debitsuccess (Vantiv, DPS).",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cardtype",
            "in": "query",
            "description": "Debitsuccess internal card type.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "JWT token using Bearer authorization scheme. See [Debitsuccess Identity Service ](https://app.swaggerhub.com/apis/debitsuccess/DebitsuccessIdentity/1.0.0) on how to generate the authorization token.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful. see - [List of responses](https://debitsuccess.atlassian.net/wiki/spaces/SDT/pages/803176544/Payment+Method+Configuration+API#PaymentMethodConfigurationAPI-WebAPI)",
            "headers": {
              "x-correlation-id": {
                "$ref": "#/components/headers/x-correlation-id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaymentProcessor"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Occurs when the authorization token provided is either expired or invalid.",
            "headers": {
              "x-correlation-id": {
                "$ref": "#/components/headers/x-correlation-id"
              }
            }
          },
          "404": {
            "description": "Not Found - The requested resource could not be found",
            "headers": {
              "x-correlation-id": {
                "$ref": "#/components/headers/x-correlation-id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Not-Found"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on our end (These are rare).",
            "headers": {
              "x-correlation-id": {
                "$ref": "#/components/headers/x-correlation-id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "summary": "INTERNAL Get Payment Processor Card Types",
        "x-internal": true
      }
    },
    "/webpay/creditcard": {
      "post": {
        "tags": [
          "Internal API"
        ],
        "description": "This endpoint processes credit card casual payments. Casual payments are recorded at the business level (Facility Account). The details of the customer making the payments are not recorded.",
        "operationId": "postwebpay",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "JWT token using Bearer authorization scheme. See [Debitsuccess Identity Service ](https://app.swaggerhub.com/apis/debitsuccess/DebitsuccessIdentity/1.0.0) on how to generate the authorization token.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The payment request was successful. see - [List of responses](https://debitsuccess.atlassian.net/wiki/spaces/RIDE/pages/500433563/RealTimePayment+API+Overview#RealTimePaymentAPIOverview-Http201)",
            "headers": {
              "location": {
                "$ref": "#/components/headers/location"
              },
              "x-correlation-id": {
                "$ref": "#/components/headers/x-correlation-id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CasualPaymentResponseSuccess"
                }
              }
            }
          },
          "202": {
            "description": "Payment has been accepted for processing.  But the processing has not been completed. The request might or might not eventually be acted upon, as it might be disallowed when processing actually takes place. In this scenario, the client must poll the URL returned in the \"location\" header of the response to retrieve the payment status code. The client must retry retrieving the status code 5 times within a 2-minute duration. If the status code still is processing after retrying. The client should contact Debitsuccess support.",
            "headers": {
              "location": {
                "$ref": "#/components/headers/location"
              },
              "x-correlation-id": {
                "$ref": "#/components/headers/x-correlation-id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CasualPaymentResponseAccepted"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Request failed due to validation errors, the response lists the field in the request that did not pass the validation. The client can directly show these errors to the end-users. see- [List of validation errors](https://debitsuccess.atlassian.net/wiki/spaces/RIDE/pages/500433563/RealTimePayment+API+Overview#RealTimePaymentAPIOverview-Http400)",
            "headers": {
              "x-correlation-id": {
                "$ref": "#/components/headers/x-correlation-id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Occurs when the authorization token provided is either expired or invalid.",
            "headers": {
              "x-correlation-id": {
                "$ref": "#/components/headers/x-correlation-id"
              }
            }
          },
          "403": {
            "description": "Forbidden - Occurs when the client does not have sufficient claims to access this endpoint. Or when the identity server client does not have access to the business this request is being made for. see - [ List of claims required for this request](https://debitsuccess.atlassian.net/wiki/spaces/RIDE/pages/500433563/RealTimePayment+API+Overview#RealTimePaymentAPIOverview-ApiResources) see - [ Additional errorCodes returned](https://debitsuccess.atlassian.net/wiki/spaces/RIDE/pages/500433563/RealTimePayment+API+Overview#RealTimePaymentAPIOverview-ApiResources)",
            "headers": {
              "x-correlation-id": {
                "$ref": "#/components/headers/x-correlation-id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionErrorList"
                }
              }
            }
          },
          "409": {
            "description": "The request could not be completed due to a conflict with the current state of the target resource.",
            "headers": {
              "x-correlation-id": {
                "$ref": "#/components/headers/x-correlation-id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Conflict"
                }
              }
            }
          },
          "422": {
            "description": "Payment processing failed. see - [for all possible responses](https://debitsuccess.atlassian.net/wiki/spaces/RIDE/pages/500433563/RealTimePayment+API+Overview#RealTimePaymentAPIOverview-Http422)",
            "headers": {
              "x-correlation-id": {
                "$ref": "#/components/headers/x-correlation-id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntitySchema"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on our end (These are rare).",
            "headers": {
              "x-correlation-id": {
                "$ref": "#/components/headers/x-correlation-id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "summary": "INTERNAL Create Webpay",
        "x-internal": true
      }
    },
    "/webpay/creditcard/{externalPaymentIdentifier}": {
      "get": {
        "tags": [
          "Internal API"
        ],
        "description": "This endpoint can be used to retrieve the payment status for all the casual payments submitted via the Post endpoint.\n",
        "operationId": "getwebpay",
        "parameters": [
          {
            "name": "externalPaymentIdentifier",
            "in": "path",
            "description": "External Payment Identifier reference used to identify the payment.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "JWT token using Bearer authorization scheme. See [Debitsuccess Identity Service ](https://app.swaggerhub.com/apis/debitsuccess/DebitsuccessIdentity/1.0.0) on how to generate the authorization token.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The payment request was successful. see - [List of responses](https://debitsuccess.atlassian.net/wiki/spaces/RIDE/pages/500433563/RealTimePayment+API+Overview#RealTimePaymentAPIOverview-Http200)",
            "headers": {
              "x-correlation-id": {
                "$ref": "#/components/headers/x-correlation-id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CasualPaymentResponseSuccess"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Occurs when the authorization token provided is either expired or invalid.",
            "headers": {
              "x-correlation-id": {
                "$ref": "#/components/headers/x-correlation-id"
              }
            }
          },
          "403": {
            "description": "Forbidden - Occurs when the client does not have sufficient claims to access this endpoint. Or when the identity server client does not have access to the business this request is being made for. see - [ List of claims required for this request](https://debitsuccess.atlassian.net/wiki/spaces/RIDE/pages/500433563/RealTimePayment+API+Overview#RealTimePaymentAPIOverview-ApiResources) see - [ Additional errorCodes returned](https://debitsuccess.atlassian.net/wiki/spaces/RIDE/pages/500433563/RealTimePayment+API+Overview#RealTimePaymentAPIOverview-ApiResources)",
            "headers": {
              "x-correlation-id": {
                "$ref": "#/components/headers/x-correlation-id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionErrorList"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - The requested resource could not be found",
            "headers": {
              "x-correlation-id": {
                "$ref": "#/components/headers/x-correlation-id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Not-Found"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on our end (These are rare).",
            "headers": {
              "x-correlation-id": {
                "$ref": "#/components/headers/x-correlation-id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "summary": " INTERNAL Get Web Payment Status",
        "x-internal": true
      }
    },
    "/{businessAccountID}/casual/creditcard/{paymentRef}": {
      "parameters": [
        {
          "schema": {
            "type": "string",
            "example": "DEA234"
          },
          "name": "businessAccountID",
          "in": "path",
          "required": true,
          "description": "Contract Prefix associated to the business account making this casual payment"
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "paymentRef",
          "in": "path",
          "required": true,
          "description": "PaymentRef can either be the Payment reference used in the Post casualPaymentTokens call or the externalPaymentIdentifier used in the Post Casual/creditcard call."
        }
      ],
      "get": {
        "summary": "Get Casual Payment by Payment Reference ",
        "tags": [
          "Casual Payments"
        ],
        "responses": {
          "200": {
            "description": "The payment request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "x-examples": {
                    "Example 1": {
                      "paymentRef": "string",
                      "description": "String",
                      "paymentAmount": "decimal(10,2)",
                      "paymentDate": "datetime",
                      "paymentId": "Integer",
                      "paymentStatus": "Cleared,Pending,Failed,Settled",
                      "paymentType": "CasualCreditCard,CasualCreditCardOther",
                      "receipt": "String",
                      "commissionAmount": "Decimal (10, 2)",
                      "settlementDate": "datetime",
                      "externalPaymentIdentifier": "string"
                    }
                  },
                  "properties": {
                    "paymentRef": {
                      "type": "string",
                      "description": "PaymentRef can either be the Payment reference used in the Post casualPaymentTokens call or the externalPaymentIdentifier used in the Post Casual/creditcard call."
                    },
                    "description": {
                      "type": "string",
                      "description": "Description of the transaction"
                    },
                    "paymentAmount": {
                      "description": "Payment amount provided in the request.",
                      "type": "number"
                    },
                    "paymentDate": {
                      "type": "string",
                      "description": "Date when the transaction was made."
                    },
                    "paymentId": {
                      "type": "integer",
                      "description": "Unique identifier for the payment"
                    },
                    "paymentStatus": {
                      "type": "string",
                      "enum": [
                        "Cleared",
                        "Pending",
                        "Failed",
                        "Settled"
                      ],
                      "description": "The status of the payment."
                    },
                    "paymentType": {
                      "type": "string",
                      "description": "Definition of the PaymentTypeCode.",
                      "enum": [
                        "CasualCreditCard",
                        "CasualCreditCardOther"
                      ]
                    },
                    "receipt": {
                      "type": "string",
                      "description": "Transaction receipt number"
                    },
                    "commissionAmount": {
                      "type": "number",
                      "description": "Amount of commision charged for the transaction."
                    },
                    "settlementDate": {
                      "type": "string",
                      "description": "Date/time message when the Settlement was processed. Note: In any case if a settlement is not performed then the SettlementDate = NULL"
                    },
                    "externalPaymentIdentifier": {
                      "type": "string",
                      "description": "A unique external payment identifier. Note, this is unique across all Debitsuccess customers. The Api consumer is responsible for generating unique identifier."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errorCode": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errorCode": {
                      "type": "string"
                    },
                    "Message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found- The requested resource could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "The Card Type provided does not match any credit card networks."
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Not Found - The requested resource could not be found. Occurs when External Identifier provided does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errorCode": {
                      "type": "string",
                      "description": "external_payment_identifier"
                    },
                    "message": {
                      "type": "string",
                      "example": "Cannot find business that matches the BusinessId/BusinessAccountId provided."
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-businessAccount-casual-creditcard-paymentRef",
        "description": "This endpoint can be used to retrieve the casual payment details by providing the initial PaymentRef. The PaymentRef used may be the paymentRef provided to Post CasualPaymentTokens endpoint or externalPaymentIdentifier provided to the Post casual/creditCard endpoint.",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "Authorization",
            "description": "JWT token using Bearer authorization scheme. See [Debitsuccess Identity Service](https://debitsuccess.stoplight.io/docs/debitsuccess-api/ZG9jOjg5Njk0NDc-authentication) on how to generate the authorization token.",
            "required": true
          }
        ],
        "x-internal": true
      }
    },
    "/casual/creditcard": {
      "post": {
        "tags": [
          "Casual Payments"
        ],
        "description": "This endpoint processes credit card casual payments. Casual payments are recorded at business level (Facility Account). The details of the customer making the payments are not recorded.",
        "operationId": "postCasualPayments",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "JWT token using Bearer authorization scheme. See [Debitsuccess Identity Service ](https://app.swaggerhub.com/apis/debitsuccess/DebitsuccessIdentity/1.0.0) on how to generate the authorization token.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The payment request was successful. ",
            "headers": {
              "location": {
                "$ref": "#/components/headers/location"
              },
              "x-correlation-id": {
                "$ref": "#/components/headers/x-correlation-id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CasualPaymentResponseSuccess"
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "status": "authorised",
                      "externalPaymentIdentifier": "ABC-b5645c56-943f-4562-ab2c-9aedf3c0b1dc"
                    }
                  },
                  "example-2": {
                    "value": {
                      "status": "declined",
                      "externalPaymentIdentifier": "ABC-b5645c56-943f-4562-ab2c-9aedf3c0b1dc"
                    }
                  },
                  "example-3": {
                    "value": {
                      "status": "declined_insufficient_funds",
                      "externalPaymentIdentifier": "ABC-b5645c56-943f-4562-ab2c-9aedf3c0b1dc"
                    }
                  },
                  "example-4": {
                    "value": {
                      "status": "declined_card_expired",
                      "externalPaymentIdentifier": "ABC-b5645c56-943f-4562-ab2c-9aedf3c0b1dc"
                    }
                  },
                  "example-5": {
                    "value": {
                      "status": "not_submitted",
                      "externalPaymentIdentifier": "ABC-b5645c56-943f-4562-ab2c-9aedf3c0b1dc"
                    }
                  },
                  "example-6": {
                    "value": {
                      "status": "declined_do_not_honour",
                      "externalPaymentIdentifier": "ABC-b5645c56-943f-4562-ab2c-9aedf3c0b1dc"
                    }
                  },
                  "example-7": {
                    "value": {
                      "status": "declined_refer_to_card_issuer",
                      "externalPaymentIdentifier": "ABC-b5645c56-943f-4562-ab2c-9aedf3c0b1dc"
                    }
                  }
                }
              }
            }
          },
          "202": {
            "description": "Payment has been accepted for processing.  But the processing has not been completed. The request might or might not eventually be acted upon, as it might be disallowed when processing actually takes place. In this scenario, the client must poll the url returned in the \"location\" header of the response to retrieve the payment status code. The client must retry retrieving the status code for 5 times within 2 minute duration. If the status code still is processing after retrying. Client should contact Debitsuccess support.",
            "headers": {
              "location": {
                "$ref": "#/components/headers/location"
              },
              "x-correlation-id": {
                "$ref": "#/components/headers/x-correlation-id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CasualPaymentResponseAccepted"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Request failed due to validation errors, the response lists the field in the request that did not pass the validation. The client can directly show these errors to the end users.",
            "headers": {
              "x-correlation-id": {
                "$ref": "#/components/headers/x-correlation-id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorList"
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "field": "CardHolderName",
                      "message": "'CardHolderName' should not be empty."
                    }
                  },
                  "example-2": {
                    "value": {
                      "field": "CardHolderName",
                      "message": "The length of 'CardHolderName' must be 50 characters or fewer. You entered <> characters."
                    }
                  },
                  "example-3": {
                    "value": {
                      "field": "PaymentDescription",
                      "message": "The length of 'PaymentDescription' must be 40 characters or fewer. You entered <> characters."
                    }
                  },
                  "example-4": {
                    "value": {
                      "field": "CardType",
                      "message": "'CardType' should not be empty."
                    }
                  },
                  "example-5": {
                    "value": {
                      "field": "CardType",
                      "message": "Invalid CardType"
                    }
                  },
                  "example-6": {
                    "value": {
                      "field": "CardNumber",
                      "message": "'CardNumber' should not be empty."
                    }
                  },
                  "example-7": {
                    "value": {
                      "field": "CardNumber",
                      "message": "Invalid card number"
                    }
                  },
                  "example-8": {
                    "value": {
                      "field": "Cvc",
                      "message": "'Cvc' should not be empty."
                    }
                  },
                  "example-9": {
                    "value": {
                      "field": "Cvc",
                      "message": "Invalid CVC number"
                    }
                  },
                  "example-10": {
                    "value": {
                      "field": "ExpiryDate",
                      "message": "'ExpiryDate' should not be empty."
                    }
                  },
                  "example-11": {
                    "value": {
                      "field": "ExpiryDate",
                      "message": "Invalid ExpiryDate Format. Please use MM/yy."
                    }
                  },
                  "example-12": {
                    "value": {
                      "field": "Amount",
                      "message": "Amount should not be empty."
                    }
                  },
                  "example-13": {
                    "value": {
                      "field": "Amount",
                      "message": "Card payment amount must be greater than or equal to $1 and less than your configured maximum value"
                    }
                  },
                  "example-14": {
                    "value": {
                      "field": "BusinessId",
                      "message": "'BusinessId' should not be empty."
                    }
                  },
                  "example-15": {
                    "value": {
                      "field": "BusinessId",
                      "message": "'The length of 'BusinessId' must be 6 characters or fewer. You entered <> characters."
                    }
                  },
                  "example-16": {
                    "value": {
                      "field": "ExternalPaymentIdentifier",
                      "message": "'ExternalPaymentIdentifier' should not be empty."
                    }
                  },
                  "example-17": {
                    "value": {
                      "field": "ExternalPaymentIdentifier",
                      "message": "The length of 'ExternalPaymentIdentifier' must be 50 characters or fewer. You entered <> characters."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Occurs when the authorization token provided is either expired or invalid.",
            "headers": {
              "x-correlation-id": {
                "$ref": "#/components/headers/x-correlation-id"
              }
            }
          },
          "403": {
            "description": "Forbidden - Occurs when the client does not have sufficient claims to access this endpoint. Or when the identity server client does not have access to the business this request is being made for. see - [ List of claims required for this request](https://debitsuccess.atlassian.net/wiki/spaces/RIDE/pages/500433563/RealTimePayment+API+Overview#RealTimePaymentAPIOverview-ApiResources) see - [ Additional errorCodes returned](https://debitsuccess.atlassian.net/wiki/spaces/RIDE/pages/500433563/RealTimePayment+API+Overview#RealTimePaymentAPIOverview-ApiResources)",
            "headers": {
              "x-correlation-id": {
                "$ref": "#/components/headers/x-correlation-id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionErrorList"
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "errorCode": "required_claims",
                      "message": "Unable to process this request due to insufficient client claims.",
                      "errors": [
                        {
                          "claim": "The name of the claim required."
                        }
                      ]
                    }
                  },
                  "example-2": {
                    "value": {
                      "errorCode": "required_scopes",
                      "message": "Unable to process this request due to insufficient client scopes.",
                      "errors": [
                        {
                          "claim": "The name of the scope required."
                        }
                      ]
                    }
                  },
                  "example-3": {
                    "value": {
                      "errorCode": "business_permission",
                      "message": "Unable to process this request due to insufficient business permission."
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "The request could not be completed due to a conflict with the external payment identifier",
            "headers": {
              "x-correlation-id": {
                "$ref": "#/components/headers/x-correlation-id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Conflict"
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "errorCode": "external_payment_identifier",
                      "message": "The external payment identifier provided has already been used."
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Occurs when the client application or the facility account is not configured appropriately for payment",
            "headers": {
              "x-correlation-id": {
                "$ref": "#/components/headers/x-correlation-id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntitySchema"
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "errorCode": "legal_address",
                      "message": "No Legal Address found on file. Please contact Debitsuccess."
                    }
                  },
                  "example-2": {
                    "value": {
                      "errorCode": "merchant_details",
                      "message": "Cannot find valid merchant details configured. Please contact Debitsuccess."
                    }
                  },
                  "example-3": {
                    "value": {
                      "errorCode": "business_commission",
                      "message": "Cannot find commission details configured for this business. Please contact Debitsuccess."
                    }
                  },
                  "example-4": {
                    "value": {
                      "errorCode": "card_not_accepted",
                      "message": "The selected payment method is not supported by this business."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on our end (These are rare).",
            "headers": {
              "x-correlation-id": {
                "$ref": "#/components/headers/x-correlation-id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "summary": "Create Casual Payments"
      }
    },
    "/casual/creditcard/{externalPaymentIdentifier}": {
      "get": {
        "tags": [
          "Casual Payments"
        ],
        "description": "This endpoint can be used to retrieve the payment status for all the casual payments submitted via the Post endpoint.\n",
        "operationId": "getCasualPayments",
        "parameters": [
          {
            "name": "externalPaymentIdentifier",
            "in": "path",
            "description": "External Payment Identifier reference used to identify the payment.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "JWT token using Bearer authorization scheme. See [Debitsuccess Identity Service](https://debitsuccess.atlassian.net/wiki/spaces/DDE/pages/986809101/Authentication) on how to generate the authorization token.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The payment request was successful.",
            "headers": {
              "x-correlation-id": {
                "$ref": "#/components/headers/x-correlation-id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CasualPaymentResponseSuccess"
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "status": "declined",
                      "externalPaymentIdentifier": "ABC-b5645c56-943f-4562-ab2c-9aedf3c0b1dc"
                    }
                  },
                  "example-2": {
                    "value": {
                      "status": "declined_insufficient_funds",
                      "externalPaymentIdentifier": "ABC-b5645c56-943f-4562-ab2c-9aedf3c0b1dc"
                    }
                  },
                  "example-3": {
                    "value": {
                      "status": "declined_card_expired",
                      "externalPaymentIdentifier": "ABC-b5645c56-943f-4562-ab2c-9aedf3c0b1dc"
                    }
                  },
                  "example-4": {
                    "value": {
                      "status": "not_submitted",
                      "externalPaymentIdentifier": "ABC-b5645c56-943f-4562-ab2c-9aedf3c0b1dc"
                    }
                  },
                  "example-5": {
                    "value": {
                      "status": "declined_do_not_honour",
                      "externalPaymentIdentifier": "ABC-b5645c56-943f-4562-ab2c-9aedf3c0b1dc"
                    }
                  },
                  "example-6": {
                    "value": {
                      "status": "declined_refer_to_card_issuer",
                      "externalPaymentIdentifier": "ABC-b5645c56-943f-4562-ab2c-9aedf3c0b1dc"
                    }
                  },
                  "example-7": {
                    "value": {
                      "status": "processing",
                      "externalPaymentIdentifier": "ABC-b5645c56-943f-4562-ab2c-9aedf3c0b1dc"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Occurs when the authorization token provided is either expired or invalid.",
            "headers": {
              "x-correlation-id": {
                "$ref": "#/components/headers/x-correlation-id"
              }
            }
          },
          "403": {
            "description": "Forbidden - Occurs when the client does not have sufficient claims to access this endpoint. Or when the identity server client does not have access to the business this request is being made for. see - [ List of claims required for this request](https://debitsuccess.atlassian.net/wiki/spaces/RIDE/pages/500433563/RealTimePayment+API+Overview#RealTimePaymentAPIOverview-ApiResources) see - [ Additional errorCodes returned](https://debitsuccess.atlassian.net/wiki/spaces/RIDE/pages/500433563/RealTimePayment+API+Overview#RealTimePaymentAPIOverview-ApiResources)",
            "headers": {
              "x-correlation-id": {
                "$ref": "#/components/headers/x-correlation-id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionErrorList"
                }
              }
            }
          },
          "422": {
            "description": "Not Found - The requested resource could not be found. Occurs when External Identifier provided does not exist.",
            "headers": {
              "x-correlation-id": {
                "$ref": "#/components/headers/x-correlation-id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Not-Found"
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "errorCode": "external_payment_identifier",
                      "message": "The requested resource could not be found."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on our end (These are rare).",
            "headers": {
              "x-correlation-id": {
                "$ref": "#/components/headers/x-correlation-id"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "summary": "Get Casual Payment Status"
      }
    },
    "/account/surcharge": {
      "get": {
        "summary": "Get Surcharge",
        "tags": [
          "Surcharge"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/200GetSurcharge"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Occurs when the authorization token provided is either expired or invalid."
          },
          "403": {
            "description": "Forbidden - Occurs the client does not have access to the endpoint.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/403GetSurcharge"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/422GetSurcharge"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500InternalServerError"
                }
              }
            }
          }
        },
        "operationId": "get-account-surcharge",
        "description": "Retrieves surcharge amount for an account.",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "maxLength": 2,
              "enum": [
                "CC",
                "CO"
              ],
              "minLength": 2
            },
            "in": "query",
            "name": "CardType",
            "required": true,
            "description": "The type of card will be used for the payment in 2 letters representation. Visa, Mastercard - CC  Other credit card type - CO"
          },
          {
            "schema": {
              "type": "number"
            },
            "in": "query",
            "name": "PaymentAmount",
            "required": true,
            "description": "Amount must be provided in order to calculate surcharge."
          },
          {
            "schema": {
              "type": "string",
              "maxLength": 15
            },
            "in": "query",
            "name": "AccountId",
            "required": true,
            "description": "System generated reference id associated to the Account extracted."
          },
          {
            "schema": {
              "type": "boolean"
            },
            "in": "query",
            "name": "CreateOneOffCharge",
            "required": true,
            "description": "the flag controls will create a one-off payment schedule or not. "
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "PaymentRequest": {
        "required": [
          "amount",
          "cardHolderName",
          "cardNumber",
          "cardType",
          "cvc",
          "expiryDate",
          "externalPaymentIdentifier"
        ],
        "type": "object",
        "properties": {
          "cardHolderName": {
            "type": "string",
            "example": "John Doe"
          },
          "cardNumber": {
            "type": "string",
            "example": "4111111111111111"
          },
          "cvc": {
            "type": "string",
            "example": "321"
          },
          "cardType": {
            "type": "string",
            "description": "supported card types- AmericanExpress, MasterCard, Visa",
            "example": "Visa"
          },
          "expiryDate": {
            "type": "string",
            "description": "format MM/yy",
            "example": "02/19"
          },
          "amount": {
            "type": "number",
            "description": "The amount to be charged. Please note, amount will be truncated to 2 decimal places",
            "format": "currency",
            "example": 10.25
          },
          "paymentDescription": {
            "type": "string",
            "description": "40 characters description that will be recorded against the payment.",
            "example": "Soft Drink"
          },
          "businessId": {
            "type": "string",
            "description": "Debitsuccess business identifier that is receiving the payment.",
            "example": "abc"
          },
          "externalPaymentIdentifier": {
            "type": "string",
            "description": "A unique external payment identifier. Note, this is unique across all Debitsuccess customers. The Api consumer is responsible for generating unique identifier",
            "example": "b5645c56-943f-4562-ab2c-9aedf3c0b1dc"
          }
        },
        "example": {
          "cardHolderName": "John Doe",
          "cardNumber": "4111111111111111",
          "cvc": "321",
          "cardType": "Visa",
          "expiryDate": "02/19",
          "amount": 10.25,
          "paymentDescription": "Soft Drink",
          "businessId": "abc",
          "externalPaymentIdentifier": "b5645c56-943f-4562-ab2c-9aedf3c0b1dc"
        }
      },
      "CasualPaymentResponseSuccess": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "authorised"
          },
          "externalPaymentIdentifier": {
            "type": "string",
            "example": "ABC-b5645c56-943f-4562-ab2c-9aedf3c0b1dc"
          }
        },
        "example": {
          "status": "authorised",
          "externalPaymentIdentifier": "ABC-b5645c56-943f-4562-ab2c-9aedf3c0b1dc"
        },
        "x-internal": false,
        "x-examples": {
          "example-1": {
            "status": "authorised",
            "externalPaymentIdentifier": "ABC-b5645c56-943f-4562-ab2c-9aedf3c0b1dc",
            "value": {
              "status": "declined",
              "externalPaymentIdentifier": "ABC-b5645c56-943f-4562-ab2c-9aedf3c0b1dc"
            }
          },
          "example-2": {
            "status": "declined",
            "externalPaymentIdentifier": "ABC-b5645c56-943f-4562-ab2c-9aedf3c0b1dc",
            "value": {
              "status": "declined_insufficient_funds",
              "externalPaymentIdentifier": "ABC-b5645c56-943f-4562-ab2c-9aedf3c0b1dc"
            }
          }
        }
      },
      "CasualPaymentResponseAccepted": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "Processing"
          },
          "externalPaymentIdentifier": {
            "type": "string",
            "description": "ExternalPaymentIdentifier - The first half of the ExternalPaymentIdentifier identifies the business id.",
            "example": "ABC-b5645c56-943f-4562-ab2c-9aedf3c0b1dc"
          }
        },
        "example": {
          "status": "Processing",
          "externalPaymentIdentifier": "ABC-b5645c56-943f-4562-ab2c-9aedf3c0b1dc"
        }
      },
      "CasualPaymentResponsePaymentRequired": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "Declined"
          },
          "externalPaymentIdentifier": {
            "type": "string",
            "example": "ABC-b5645c56-943f-4562-ab2c-9aedf3c0b1dc"
          },
          "message": {
            "type": "string",
            "description": "User friendly response message from Payment gateway.",
            "example": "Failed to process the request."
          }
        }
      },
      "UnprocessableEntitySchema": {
        "type": "object",
        "example": {
          "errorCode": "business_id",
          "message": "Cannot find business that matches the BusinessId/BusinessAccountId provided.."
        },
        "properties": {
          "errorCode": {
            "type": "string",
            "example": "business_id"
          },
          "message": {
            "type": "string",
            "description": "User friendly response message from Payment gateway.",
            "example": "Cannot find business that matches the BusinessId/BusinessAccountId provided."
          }
        }
      },
      "PermissionError": {
        "type": "object",
        "properties": {
          "claim": {
            "type": "string",
            "example": "The name of the claim required."
          }
        }
      },
      "ServerError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Something went wrong while processing your request. We’re sorry for the trouble. We’ve been notified of the error and will correct it as soon as possible. Please try your request again in a moment."
          }
        },
        "example": {
          "message": "Something went wrong while processing your request. We’re sorry for the trouble. We’ve been notified of the error and will correct it as soon as possible. Please try your request again in a moment."
        }
      },
      "Not-Found": {
        "type": "object",
        "properties": {
          "errorCode": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "Conflict": {
        "type": "object",
        "properties": {
          "errorCode": {
            "type": "string",
            "example": "external_payment_identifier"
          },
          "message": {
            "type": "string",
            "example": "The external payment identifier provided has already been used."
          }
        },
        "example": {
          "errorCode": "external_payment_identifier",
          "message": "The external payment identifier provided has already been used."
        }
      },
      "ValidationError": {
        "type": "object",
        "properties": {
          "field": {
            "type": "string",
            "example": "amount"
          },
          "message": {
            "type": "string",
            "example": "amount is required"
          }
        }
      },
      "ValidationErrorList": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "invalid request"
          },
          "errorCode": {
            "type": "string",
            "description": "This code can be either invalid_request or validation. invalid_request indicates that the client provided ExternalPaymentIdentifier that does not match the format. Validation can be displayed to the end users. These include invalid information such as invalid credit card number no expiry date etc.",
            "example": "validation"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            }
          }
        },
        "example": {
          "message": "invalid request",
          "errorCode": "validation",
          "errors": [
            {
              "field": "amount",
              "message": "amount is required"
            }
          ]
        },
        "x-examples": {
          "example-1": {
            "value": {
              "message": "invalid request",
              "errorCode": "validation",
              "errors": [
                {
                  "field": "amount",
                  "message": "amount is required"
                }
              ]
            }
          }
        }
      },
      "PermissionErrorList": {
        "type": "object",
        "properties": {
          "errorCode": {
            "type": "string",
            "example": "required_claims"
          },
          "message": {
            "type": "string",
            "example": "Unable to process this request due to insufficient client claims."
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PermissionError"
            }
          }
        },
        "example": {
          "errorCode": "required_claims",
          "message": "Unable to process this request due to insufficient client claims.",
          "errors": [
            {
              "claim": "The name of the claim required."
            }
          ]
        }
      },
      "inline_response_200": {
        "type": "object",
        "properties": {
          "businessId": {
            "type": "string",
            "description": "Debitsuccess business identifier that is receiving the payment.",
            "example": "abc"
          },
          "externalPaymentIdentifier": {
            "type": "string",
            "description": "A unique external payment identifier. Note, this is unique across all Debitsuccess customers. The Api consumer is responsible for generating unique identifier",
            "example": "b5645c56-943f-4562-ab2c-9aedf3c0b1dc"
          },
          "transactionRef": {
            "type": "string",
            "description": "triPos sales response transaction Id.",
            "example": "1232"
          },
          "merchantRef": {
            "type": "integer",
            "description": "triPos sales response merchant Id.",
            "example": 1232
          },
          "cardType": {
            "type": "string",
            "description": "supported card types- AmericanExpress, Mastercard, Visa, Discover,Jcb",
            "example": "Visa"
          },
          "amount": {
            "type": "number",
            "description": "The amount to be charged. Please note, amount will be truncated to 2 decimal places",
            "example": 10.25
          },
          "paymentDescription": {
            "type": "string",
            "description": "40 characters description that will be recorded against the payment.",
            "example": "1 week membership"
          }
        }
      },
      "body": {
        "required": [
          "amount",
          "businessId",
          "cardType",
          "externalPaymentIdentifier",
          "merchantRef",
          "transactionRef"
        ],
        "type": "object",
        "properties": {
          "businessId": {
            "type": "string",
            "description": "Debitsuccess business identifier that is receiving the payment.",
            "example": "abc"
          },
          "externalPaymentIdentifier": {
            "type": "string",
            "description": "A unique external payment identifier. Note, this is unique across all Debitsuccess customers. The Api consumer is responsible for generating unique identifier",
            "example": "b5645c56-943f-4562-ab2c-9aedf3c0b1dc"
          },
          "transactionRef": {
            "type": "string",
            "description": "triPos sales response transaction Id.",
            "example": "1232"
          },
          "merchantRef": {
            "type": "integer",
            "description": "triPos sales response merchant Id.",
            "example": 1232
          },
          "cardType": {
            "type": "string",
            "description": "supported card types- AmericanExpress, Mastercard, Visa, Discover,Jcb",
            "example": "Visa"
          },
          "amount": {
            "type": "number",
            "description": "The amount to be charged. Please note, amount will be truncated to 2 decimal places",
            "example": 10.25
          },
          "paymentDescription": {
            "type": "string",
            "description": "40 characters description that will be recorded against the payment.",
            "example": "1 week membership"
          }
        }
      },
      "inline_response_201": {
        "type": "object",
        "properties": {
          "businessId": {
            "type": "string",
            "description": "Debitsuccess business identifier that is receiving the payment.",
            "example": "abc"
          },
          "externalPaymentIdentifier": {
            "type": "string",
            "description": "A unique external payment identifier. Note, this is unique across all Debitsuccess customers. The Api consumer is responsible for generating unique identifier",
            "example": "b5645c56-943f-4562-ab2c-9aedf3c0b1dc"
          },
          "transactionRef": {
            "type": "string",
            "description": "triPos sales response transaction Id.",
            "example": "1232"
          },
          "merchantRef": {
            "type": "integer",
            "description": "triPos sales response merchant Id.",
            "example": 1232
          },
          "cardType": {
            "type": "string",
            "description": "supported card types- AmericanExpress, Mastercard, Visa, Discover,Jcb",
            "example": "Visa"
          },
          "amount": {
            "type": "number",
            "description": "Please note, amount will be truncated to 2 decimal places",
            "example": 10.25
          },
          "paymentDescription": {
            "type": "string",
            "description": "40 characters description that will be recorded against the payment.",
            "example": "1 week membership"
          }
        }
      },
      "inline_response_200_1": {
        "type": "object",
        "properties": {
          "businessId": {
            "type": "string",
            "description": "Debitsuccess business identifier that is receiving the payment.",
            "example": "abc"
          },
          "externalPaymentIdentifier": {
            "type": "string",
            "description": "A unique external payment identifier. Note, this is unique across all Debitsuccess customers. The Api consumer is responsible for generating unique identifier",
            "example": "b5645c56-943f-4562-ab2c-9aedf3c0b1dc"
          },
          "originalTransactionRef": {
            "type": "string",
            "description": "original transaction that is getting reversed. This transaction id must exists in debitsuccess side.",
            "example": "547555845"
          },
          "reversalTransactionRef": {
            "type": "string",
            "description": "reversed transaction id that was returned from payment terminal as part of the reversed request.",
            "example": "44453223"
          },
          "merchantRef": {
            "type": "number",
            "description": "triPos sales response merchant Id.",
            "example": 1232
          },
          "cardType": {
            "type": "string",
            "description": "supported card types- AmericanExpress, Mastercard, Visa, Discover,Jcb",
            "example": "Visa"
          },
          "amount": {
            "type": "integer",
            "description": "Reversal amount. Also note, amount will be truncated to 2 decimal places"
          },
          "paymentDescription": {
            "type": "string",
            "description": "40 characters description that will be recorded against the payment.",
            "example": "1 week membership"
          },
          "reversedType": {
            "type": "string",
            "description": "Use one (Return,Refund,Reversed,Void)",
            "example": "void"
          }
        }
      },
      "body_1": {
        "required": [
          "amount",
          "businessId",
          "cardType",
          "externalPaymentIdentifier",
          "merchantRef",
          "reversalTransactionRef",
          "reversalType"
        ],
        "type": "object",
        "properties": {
          "businessId": {
            "type": "string",
            "description": "Debitsuccess business identifier that is receiving the payment.",
            "example": "abc"
          },
          "externalPaymentIdentifier": {
            "type": "string",
            "description": "A unique external payment identifier. Note, this is unique across all Debitsuccess customers. The Api consumer is responsible for generating unique identifier",
            "example": "b5645c56-943f-4562-ab2c-9aedf3c0b1dc"
          },
          "originalTransactionRef": {
            "type": "string",
            "description": "original transaction that is getting reversed. This transaction id must exists in debitsuccess side.",
            "example": "547555845"
          },
          "reversalTransactionRef": {
            "type": "string",
            "description": "reversed transaction id that was returned from payment terminal as part of the reversal request.",
            "example": "44453223"
          },
          "merchantRef": {
            "type": "number",
            "description": "triPos sales response merchant Id.",
            "example": 1232
          },
          "cardType": {
            "type": "string",
            "description": "supported card types- AmericanExpress, Mastercard, Visa, Discover,Jcb",
            "example": "Visa"
          },
          "amount": {
            "type": "integer",
            "description": "reversal amount. Amount will be truncated to 2 decimal places"
          },
          "paymentDescription": {
            "type": "string",
            "description": "40 characters description that will be recorded against the payment.",
            "example": "1 week membership"
          },
          "reversalType": {
            "type": "string",
            "description": "Use one (Return,Refund,Reversed,Void)",
            "example": "void"
          }
        }
      },
      "inline_response_201_1": {
        "type": "object",
        "properties": {
          "businessId": {
            "type": "string",
            "description": "Debitsuccess business identifier that is receiving the payment.",
            "example": "abc"
          },
          "externalPaymentIdentifier": {
            "type": "string",
            "description": "A unique external payment identifier. Note, this is unique across all Debitsuccess customers. The Api consumer is responsible for generating unique identifier",
            "example": "b5645c56-943f-4562-ab2c-9aedf3c0b1dc"
          },
          "originalTransactionRef": {
            "type": "string",
            "description": "original transaction that is getting reversed. This transaction id must exists in debitsuccess side.",
            "example": "547555845"
          },
          "reversalTransactionRef": {
            "type": "string",
            "description": "reversed transaction id that was returned from payment terminal as part of the reversal request.",
            "example": "44453223"
          },
          "merchantRef": {
            "type": "number",
            "description": "triPos sales response merchant Id.",
            "example": 1232
          },
          "cardType": {
            "type": "string",
            "description": "supported card types- AmericanExpress, Mastercard, Visa, Discover,Jcb",
            "example": "Visa"
          },
          "amount": {
            "type": "integer",
            "description": "reversal amount. Amount will be truncated to 2 decimal places"
          },
          "paymentDescription": {
            "type": "string",
            "description": "40 characters description that will be recorded against the payment.",
            "example": "1 week membership"
          },
          "reversalType": {
            "type": "string",
            "description": "the type of reversal that is processed. Use one (Return,Refund,Reversed,Void)",
            "example": "void"
          }
        }
      },
      "201CreatePayment": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "externalPaymentIdentifier": {
            "type": "string"
          },
          "transactionNumber": {
            "type": "string",
            "description": "Recipt number"
          }
        }
      },
      "400CreatePayment": {
        "type": "object",
        "properties": {
          "errorCode": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "errors": {
            "type": "array",
            "items": {
              "required": [
                "field",
                "message"
              ],
              "type": "object",
              "properties": {
                "field": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "403BusinessAccessDenied": {
        "type": "object",
        "properties": {
          "errorCode": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "404NotFound": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        }
      },
      "409CreatePayment": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "properties": {
            "type": "object",
            "properties": {
              "message": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "429TooManyRequests": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        }
      },
      "202CreatePayment": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "CreatePaymentRequest": {
        "type": "object",
        "x-examples": {},
        "properties": {
          "accountId": {
            "maxLength": 15,
            "type": "string",
            "description": "Unique Identifier associated to the Account that make this payment"
          },
          "externalPaymentIdentifier": {
            "maxLength": 50,
            "type": "string",
            "description": "External payment identifier (contains alpha-numeric and '-') associated to this payment. Must be unique per client"
          },
          "accountHolderName": {
            "type": "string",
            "description": "Account holder name. Only contains alpha numeric, space and apostrophe. Required if cardType is not Token"
          },
          "cardNumber": {
            "type": "string",
            "description": "Card number. Only contains numeric.  Required if cardType is not Token"
          },
          "cvc": {
            "type": "string",
            "description": "Card verification code. Only contains numeric. Required if cardType is not Token"
          },
          "cardType": {
            "type": "string",
            "description": "Enum: Visa, MasterCard, Token, Amex"
          },
          "expiryDate": {
            "type": "string",
            "description": "Expiry date (MM/yyyy) of credit card used. Required if cardType is not Token"
          },
          "token": {
            "type": "string",
            "description": "Unique string value associated with PayMethod"
          },
          "amount": {
            "type": "number",
            "description": "payment amount. Numeric 2 decimal points"
          },
          "paymentDescription": {
            "type": "string",
            "description": "Description of the payment"
          },
          "createOneOffCharge": {
            "type": "boolean",
            "description": "If true, a One-Off pay schedule will be created. Gateway account must have createOneOffCharge=true",
            "default": false
          }
        }
      },
      "422CreatePayment": {
        "type": "object",
        "properties": {
          "errorCode": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "500InternalServerError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        },
        "x-examples": {
          "example-1": {
            "message": "string"
          }
        }
      },
      "503ServiceUnavailable": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        }
      },
      "200GetPayment": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "externalPaymentIdentifier": {
            "type": "string"
          },
          "transactionNumber": {
            "type": "string",
            "description": "transaction receipt number"
          }
        },
        "x-examples": {}
      },
      "403ForbiddenClaims": {
        "type": "object",
        "properties": {
          "errorCode": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "errors": {
            "type": "array",
            "items": {
              "required": [
                "claim"
              ],
              "type": "object",
              "properties": {
                "claim": {
                  "type": "string"
                }
              }
            }
          }
        },
        "x-examples": {}
      },
      "422GetPayment": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        },
        "x-examples": {}
      },
      "CreateBusinessCollectedPaymentRequest": {
        "type": "object",
        "properties": {
          "accountId": {
            "maxLength": 15,
            "type": "string",
            "description": "Unique identifier associated to the account of the business collected payment to be created"
          },
          "externalTransactionIdentifier": {
            "maxLength": 50,
            "type": "string",
            "description": "Must be unique per facility account. Also note that this identifier will be required in order to reverse this payment. Only contains alphanumeric and hyphen"
          },
          "amount": {
            "type": "number",
            "description": "Amount of payment collected at business. This field must be greater than 0.00"
          },
          "dateTimeOfPayment": {
            "type": "string",
            "description": "Date time when this payment is collected in UTC"
          },
          "description": {
            "maxLength": 30,
            "type": "string",
            "description": "Description of the payment"
          }
        }
      },
      "201CreateBusinessCollectedPayment": {
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string"
          },
          "externalPaymentIdentifier": {
            "type": "string"
          }
        }
      },
      "400CreateBusinessCollectedPayment": {
        "type": "object",
        "properties": {
          "errorCode": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "errors": {
            "type": "array",
            "items": {
              "required": [
                "field",
                "message"
              ],
              "type": "object",
              "properties": {
                "field": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "200GetBusinessCollectedPayment": {
        "type": "object",
        "properties": {
          "businessCollectedPayments": {
            "type": "array",
            "items": {
              "required": [
                "businessAccountId",
                "accountId",
                "accountExternalId",
                "externalTransactionIdentifier",
                "amount",
                "dateTimeOfPayment",
                "description"
              ],
              "type": "object",
              "properties": {
                "businessAccountId": {
                  "type": "string"
                },
                "accountId": {
                  "type": "string"
                },
                "accountExternalId": {
                  "type": "string"
                },
                "externalTransactionIdentifier": {
                  "type": "string"
                },
                "amount": {
                  "type": "string"
                },
                "dateTimeOfPayment": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                }
              }
            }
          },
          "responseMetadata": {
            "type": "object",
            "properties": {
              "nextCursor": {
                "type": "string"
              },
              "hasNext": {
                "type": "boolean"
              }
            }
          }
        }
      },
      "400DeleteBusinessCollectedPayment": {
        "type": "object",
        "properties": {
          "errorCode": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "errors": {
            "type": "array",
            "items": {
              "required": [
                "field",
                "message"
              ],
              "type": "object",
              "properties": {
                "field": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "ReverseBusinessCollectedPaymentRequest": {
        "type": "object",
        "properties": {
          "externalPaymentIdentifier": {
            "maxLength": 50,
            "type": "string",
            "description": "Unique identifier associated to the reversal transaction. Only contains alphanumeric and hyphen"
          },
          "dateTimeOfReversal": {
            "type": "string",
            "description": "Date time when this payment is reversed/deleted in UTC"
          },
          "description": {
            "maxLength": 30,
            "type": "string",
            "description": "Description of the payment reversal/deletion"
          }
        }
      },
      "201ReverseBusinessCollectedPayment": {
        "type": "object",
        "properties": {
          "externalPaymentIdentifier": {
            "type": "string"
          },
          "dateTimeOfReversal": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "PayMethodResponseList": {
        "type": "object",
        "properties": {
          "methodType": {
            "type": "string",
            "description": "The type of paymethod (CC - Credit Card or BA - Bank Account).",
            "example": "CC"
          },
          "methodSubType": {
            "type": "string",
            "description": "The credit card type of the paymethod",
            "example": "VI"
          },
          "networkName": {
            "type": "string",
            "description": "Name of the network that issued the card type.",
            "example": "Visa"
          },
          "creditAllowed": {
            "type": "boolean",
            "description": "Is credit card allowed or not.",
            "example": true
          },
          "debitAllowed": {
            "type": "boolean",
            "description": "Is debit card allowed or not.",
            "example": true
          },
          "prepaidAllowed": {
            "type": "boolean",
            "description": "Is prepaid card allowed or not.",
            "example": false
          },
          "validationRules": {
            "type": "array",
            "description": "Validation rules that can be used to determine whether a card number matches this paymethod.",
            "items": {
              "$ref": "#/components/schemas/ValidationRules"
            }
          }
        },
        "example": {
          "methodType": "CC",
          "methodSubType": "VI",
          "networkName": "Visa",
          "creditAllowed": true,
          "debitAllowed": true,
          "prepaidAllowed": false,
          "validationRules": [
            {
              "regex": "^(4)",
              "purpose": "CardType"
            }
          ]
        }
      },
      "PayMethodResponse": {
        "type": "object",
        "properties": {
          "methodType": {
            "type": "string",
            "description": "The type of paymethod (CC - Credit Card or BA - Bank Account).",
            "example": "CC"
          },
          "methodSubType": {
            "type": "string",
            "description": "The credit card type of the paymethod",
            "example": "VI"
          },
          "networkName": {
            "type": "string",
            "description": "Name of the network that issued the card type.",
            "example": "Visa"
          },
          "validationRules": {
            "type": "array",
            "description": "Validation rules that can be used to determine whether a card number matches this paymethod.",
            "items": {
              "$ref": "#/components/schemas/ValidationRules"
            }
          }
        },
        "example": {
          "methodType": "CC",
          "methodSubType": "VI",
          "networkName": "Visa",
          "validationRules": [
            {
              "regex": "^(4)",
              "purpose": "CardType"
            }
          ]
        }
      },
      "PaymentProcessor": {
        "type": "object",
        "properties": {
          "PaymentProcessorCardType": {
            "type": "string",
            "description": "The card type that is configured for payment processor.",
            "example": "AX"
          },
          "PaymentProcessorName": {
            "type": "string",
            "description": "Name of the payment processor.",
            "example": "Vantiv"
          }
        },
        "example": {
          "PaymentProcessorCardType": "AX",
          "PaymentProcessorName": "Vantiv"
        }
      },
      "ValidationRules": {
        "type": "object",
        "properties": {
          "regex": {
            "type": "string",
            "description": "Regex value that can be used to validate card number.",
            "example": "^(4)"
          },
          "purpose": {
            "type": "string",
            "description": "Defines the purpose of the regex value. In this example, the corresponding regex can be used to determine whether a card number is visa card type.",
            "example": "CardType"
          }
        }
      },
      "200GetSurcharge": {
        "description": "",
        "type": "object",
        "x-examples": {
          "example": {
            "paymentAmount": 60,
            "surchargeAmount": 0.66,
            "totalPaymentAmount": 60.66,
            "currency": "AUD",
            "allocations": [
              {
                "name": "One-off payment",
                "amount": 0.11
              },
              {
                "name": "Recurring payment",
                "amount": 0.55
              }
            ]
          }
        },
        "properties": {
          "paymentAmount": {
            "type": "number",
            "description": "Payment amount provided in the request."
          },
          "surchargeAmount": {
            "type": "number",
            "description": "Total surcharge amount for the payment."
          },
          "totalPaymentAmount": {
            "type": "number",
            "description": "Total amount (PaymentAmount + SurchargeAmount ) which will be charged from customer’s card when a payment request will be processed. "
          },
          "currency": {
            "type": "string",
            "description": "NZD / AUD",
            "enum": [
              "NZD",
              "AUD"
            ]
          },
          "allocations": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Type of payment",
                  "enum": [
                    "One-off payment",
                    "Recurring payment"
                  ]
                },
                "amount": {
                  "type": "number"
                }
              },
              "required": [
                "name",
                "amount"
              ]
            }
          }
        },
        "required": [
          "paymentAmount",
          "surchargeAmount",
          "totalPaymentAmount",
          "currency",
          "allocations"
        ]
      },
      "401GetSurcharge": {
        "type": "object",
        "properties": {
          "errorCode": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "errors": {
            "type": "array",
            "items": {
              "required": [
                "field",
                "message"
              ],
              "type": "object",
              "properties": {
                "field": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "403GetSurcharge": {
        "description": "",
        "type": "object",
        "properties": {
          "errorCode": {
            "type": "string",
            "minLength": 1
          },
          "message": {
            "type": "string",
            "minLength": 1
          },
          "requiredScopes": {
            "type": "array",
            "items": {
              "required": [],
              "properties": {}
            }
          }
        },
        "required": [
          "errorCode",
          "message",
          "requiredScopes"
        ],
        "x-examples": {
          "example": {
            "errorCode": "required_scopes",
            "message": "Unable to process this request due to insufficient client scopes.",
            "requiredScopes": [
              "AccountCreditCard"
            ]
          }
        }
      },
      "422GetSurcharge": {
        "description": "",
        "type": "object",
        "properties": {
          "errorCode": {
            "type": "string",
            "minLength": 1
          },
          "message": {
            "type": "string",
            "minLength": 1
          }
        },
        "required": [
          "errorCode",
          "message"
        ],
        "x-examples": {
          "example": {
            "errorCode": "split_payment",
            "message": "Unable to process this request as this business has payout split configured."
          },
          "example-1": {
            "errorCode": "surcharge_not_configured",
            "message": "Unable to process this request as this business account does not have surcharge policy configured."
          }
        }
      },
      "429GetSurcharge  ": {
        "type": "object",
        "properties": {
          "errorCode": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "errors": {
            "type": "array",
            "items": {
              "required": [
                "field",
                "message"
              ],
              "type": "object",
              "properties": {
                "field": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "responses": {
      "Success-Casual-Payment-Response-Ok": {
        "description": "The payment request was successful. see - [List of responses](https://debitsuccess.atlassian.net/wiki/spaces/RIDE/pages/500433563/RealTimePayment+API+Overview#RealTimePaymentAPIOverview-Http200)",
        "headers": {
          "x-correlation-id": {
            "$ref": "#/components/headers/x-correlation-id"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CasualPaymentResponseSuccess"
            }
          }
        }
      },
      "Success-Casual-Payment-Response": {
        "description": "The payment request was successful. see - [List of responses](https://debitsuccess.atlassian.net/wiki/spaces/RIDE/pages/500433563/RealTimePayment+API+Overview#RealTimePaymentAPIOverview-Http201)",
        "headers": {
          "location": {
            "$ref": "#/components/headers/location"
          },
          "x-correlation-id": {
            "$ref": "#/components/headers/x-correlation-id"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CasualPaymentResponseSuccess"
            }
          }
        }
      },
      "Accepted-Casual-Payment-Response": {
        "description": "Payment has been accepted for processing.  But the processing has not been completed. The request might or might not eventually be acted upon, as it might be disallowed when processing actually takes place. In this scenario, the client must poll the url returned in the \"location\" header of the response to retrieve the payment status code. The client must retry retrieving the status code for 5 times within 2 minute duration. If the status code still is processing after retrying. Client should contact Debitsuccess support.",
        "headers": {
          "location": {
            "$ref": "#/components/headers/location"
          },
          "x-correlation-id": {
            "$ref": "#/components/headers/x-correlation-id"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CasualPaymentResponseAccepted"
            }
          }
        }
      },
      "Required-Casual-Payment-Response": {
        "description": "Payment processing failed. see - [for all possible responses](https://debitsuccess.atlassian.net/wiki/spaces/RIDE/pages/500433563/RealTimePayment+API+Overview#RealTimePaymentAPIOverview-Http402)",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CasualPaymentResponsePaymentRequired"
            }
          },
          "headers": {
            "x-correlation-id": {
              "$ref": "#/components/headers/x-correlation-id"
            }
          }
        }
      },
      "Unprocessable-Entity-Response": {
        "description": "Payment processing failed. see - [for all possible responses](https://debitsuccess.atlassian.net/wiki/spaces/RIDE/pages/500433563/RealTimePayment+API+Overview#RealTimePaymentAPIOverview-Http422)",
        "headers": {
          "x-correlation-id": {
            "$ref": "#/components/headers/x-correlation-id"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UnprocessableEntitySchema"
            }
          }
        }
      },
      "Forbidden": {
        "description": "Forbidden - Occurs when the client does not have sufficient claims to access this endpoint. Or when the identity server client does not have access to the business this request is being made for. see - [ List of claims required for this request](https://debitsuccess.atlassian.net/wiki/spaces/RIDE/pages/500433563/RealTimePayment+API+Overview#RealTimePaymentAPIOverview-ApiResources) see - [ Additional errorCodes returned](https://debitsuccess.atlassian.net/wiki/spaces/RIDE/pages/500433563/RealTimePayment+API+Overview#RealTimePaymentAPIOverview-ApiResources)",
        "headers": {
          "x-correlation-id": {
            "$ref": "#/components/headers/x-correlation-id"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PermissionErrorList"
            }
          }
        }
      },
      "Not-Found": {
        "description": "Not Found - The requested resource could not be found",
        "headers": {
          "x-correlation-id": {
            "$ref": "#/components/headers/x-correlation-id"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Not-Found"
            }
          }
        }
      },
      "Conflict": {
        "description": "The request could not be completed due to a conflict with the current state of the target resource.",
        "headers": {
          "x-correlation-id": {
            "$ref": "#/components/headers/x-correlation-id"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Conflict"
            }
          }
        }
      },
      "Server-Error": {
        "description": "Internal Server Error - Something went wrong on our end (These are rare).",
        "headers": {
          "x-correlation-id": {
            "$ref": "#/components/headers/x-correlation-id"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ServerError"
            }
          }
        }
      },
      "Unauthorised-Error": {
        "description": "Unauthorized - Occurs when the authorization token provided is either expired or invalid.",
        "headers": {
          "x-correlation-id": {
            "$ref": "#/components/headers/x-correlation-id"
          }
        }
      },
      "Validation-Error": {
        "description": "Bad Request - Request failed due to validation errors, the response lists the field in the request that did not pass the validation. The client can directly show these errors to the end users. see- [List of validation errors](https://debitsuccess.atlassian.net/wiki/spaces/RIDE/pages/500433563/RealTimePayment+API+Overview#RealTimePaymentAPIOverview-Http400)",
        "headers": {
          "x-correlation-id": {
            "$ref": "#/components/headers/x-correlation-id"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ValidationErrorList"
            }
          }
        }
      }
    },
    "parameters": {
      "Authorization": {
        "name": "Authorization",
        "in": "header",
        "description": "JWT token using Bearer authorization scheme. See [Debitsuccess Identity Service ](https://app.swaggerhub.com/apis/debitsuccess/DebitsuccessIdentity/1.0.0) on how to generate the authorization token.",
        "required": true,
        "style": "simple",
        "explode": false,
        "schema": {
          "type": "string"
        }
      }
    },
    "headers": {
      "location": {
        "description": "URL that can be used to retrieve the payment status",
        "style": "simple",
        "explode": false,
        "schema": {
          "type": "string",
          "example": "Get - https://oc-sbox.debitsuccess.com/Payments/v1.0/realtime/cardpayments/TST-443508918"
        }
      },
      "x-correlation-id": {
        "description": "A unique identifier used to track the path this request internally in Debitsuccess.",
        "style": "simple",
        "explode": false,
        "schema": {
          "type": "string",
          "example": "0HLD8JO11CCGR:00000001"
        }
      }
    },
    "securitySchemes": {
      "apiKeyHeader": {
        "type": "apiKey",
        "name": "Ocp-Apim-Subscription-Key",
        "in": "header"
      },
      "apiKeyQuery": {
        "type": "apiKey",
        "name": "subscription-key",
        "in": "query"
      }
    }
  }
}